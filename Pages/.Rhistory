pbinom(9, size=12, prob=1/6) - pbinom(7, size=12, prob=1/6)
pbinom(9, size=12, prob=1/6)
pbinom(7:9, size=12, prob=1/6)
dbinom(9, size=12, prob=1/6) - dbinom(7, size=12, prob=1/6)
dbinom(7, size=12, prob=1/6)
dbinom(9, size=12, prob=1/6)
pbinom(9, size=12, prob=1/6) - pbinom(6, size=12, prob=1/6)
k = pbinom(9, 12, 1/6)
j = pbinom(6, 12, 1/6)
k - j
?pnorm
pnorm(84 , mean = 72, sd = 15.2, lower.tail = F)
dnorm(84 , mean = 72, sd = 15.2, lower.tail = F)
dnorm(84 , mean = 72, sd = 15.2)
# Ques 2
dnorm(84, 72, 15.2, log=FALSE)
dnorm(84 , mean = 72, sd = 15.2)
1-dnorm(84 , mean = 72, sd = 15.2)
pnorm(84 , mean = 72, sd = 15.2)
1-pnorm(84 , mean = 72, sd = 15.2)
pnorm(84 , mean = 72, sd = 15.2, lower.tail = F)
pnorm(84 , mean = 72, sd = 15.2, lower.tail = F) * 100
ppois(0, 5)
?ppois
ppois(48:50, 50)
sum(ppois(48:50, 50))
x = dpois(48, 50)
y = dpois(49, 50)
z = dpois(50, 50)
print(x+y+z)
ppois(48:50, 50)
ppois(48, 50)
dpois(48, 50)
sum(dpois(48:50, 50))
dpois(0, 5)
library(shiny); runApp('Documents/Dashboard_data_sci/Pages/home.R')
runApp('Documents/Dashboard_data_sci/Pages/home.R')
runApp('Documents/Dashboard_data_sci/Pages/home.R')
runApp('Documents/Dashboard_data_sci/Pages/home.R')
colnames(transaction)
plot(density(transaction$Aging))
any(is.na(transaction$Aging))
transaction[is.na(transaction$Aging), ]$Aging = median(transaction$Aging, na.rm=T)
plot(density(transaction$Aging))
unique(transaction$Aging)
runApp('Documents/Dashboard_data_sci/Pages/home.R')
unique(order.priority)
p = order[order.priority != "", ]$order.priority
unique(p)
p = order[order.priority != "", ]$order.priority
plot_ly(order, x=p)
runApp('Documents/Dashboard_data_sci/Pages/home.R')
z = transaction %>% inner_join(customer) %>% inner_join(order) %>% inner_join(ship) %>% inner_join(products)
z = transaction %>% inner_join(customer) %>% inner_join(order) %>% inner_join(ship) %>% inner_join(product)
View(z)
profit.per.category = z %>% select(profit, product.category) %>% group_by(product.category) %>% summaris(sum = sum(profit))
profit.per.category = z %>% select(profit, product.category) %>% group_by(product.category) %>% summarise(sum = sum(profit))
profit.per.category
plot_ly(profit.per.category, labels=profit.per.category$product.category, values=profit.per.category$sum, type="pie")
table = transaction %>% inner_join(product, by="product.id")
table %>% tapply(profit, product.category, sum=sum(profit))
table %>% tapply(table$profit, table$product.category, sum=sum(table$profit))
colnames(table)
tapply(table$profit, table$product.category, sum)
ppc = tapply(table$profit, table$product.category, sum)
ppc[1]
rownames(ppc)
ppc[1:2]
table = transaction %>% inner_join(product, by="product.id")
ppc = tapply(table$profit, table$product.category, sum)
plot_ly(ppc, label=rownames(ppc), values=ppc, type="pie")
data.frame(ppc)
ppc = data.frame(ppc)
ppc
ppc[1]
ppc[2]
rownames(ppc)
ppc$ppc
profit.per.category = function(){
table = transaction %>% inner_join(product, by="product.id")
ppc = tapply(table$profit, table$product.category, sum)
ppc = data.frame(ppc)
plot_ly(ppc, label=rownames(ppc), values=ppc$ppc, type="pie")
}
profit.per.category()
profit.per.category = function(){
table = transaction %>% inner_join(product, by="product.id")
ppc = tapply(table$profit, table$product.category, sum)
ppc = data.frame(ppc)
plot_ly(ppc, labels=rownames(ppc), values=ppc$ppc, type="pie")
}
profit.per.category()
runApp('Documents/Dashboard_data_sci/Pages/home.R')
runApp('Documents/Dashboard_data_sci/Pages/home.R')
plot3()
plot(transaction$quantity.purchased, ship$ship.cost)
ship.qty = function() {
plot(profit.ship.cost$profit, profit.ship.cost$ship.cost,
xlab="Profit", ylab="Shipping Cost",
main="Relationship between profit and shipping cost")
}
ship.qty()
data = transaction %>%
inner_join(customer, by="customer.id") %>%
inner_join(product, by="product.id") %>%
select(product.name, product.category, quantity.purchased, customer.country) %>%
group_by(customer.country) %>%
summarise(max=max(quantity.purchased))
data
data = transaction %>%
inner_join(customer, by="customer.id") %>%
inner_join(product, by="product.id") %>%
select(product.name, product.category, quantity.purchased, customer.country) %>%
group_by(customer.country) %>%
filter(quantity.purchase==max(quantity.purchased))
data = transaction %>%
inner_join(customer, by="customer.id") %>%
inner_join(product, by="product.id") %>%
select(product.name, product.category, quantity.purchased, customer.country) %>%
group_by(customer.country) %>%
filter(quantity.purchased==max(quantity.purchased))
View(data)
data = transaction %>%
inner_join(customer, by="customer.id") %>%
inner_join(product, by="product.id") %>%
select(product.name, product.category, quantity.purchased, customer.country) %>%
group_by(customer.country)
View(data)
data = transaction %>%
inner_join(customer, by="customer.id") %>%
inner_join(product, by="product.id") %>%
select(product.name, product.category, quantity.purchased, customer.country) %>%
group_by(customer.country) %>% group_by(product.category) %>% summarise(sum = sum(quantity.purchased))
View(data)
data = transaction %>%
inner_join(customer, by="customer.id") %>%
inner_join(product, by="product.id") %>%
select(product.name, product.category, quantity.purchased, customer.country) %>%
group_by(customer.country, product.category) %>% summarise(sum = sum(quantity.purchased))
View(data)
unique(product.category)
unique(product$product.category)
data[data$customer.country == "Egypt", ]
cc = data[data$customer.country == "Egypt", ]
plot_ly(cc, labels=cc$product.category, values=cc$sum, type="pie")
colnames(transaction)
table1 = transaction %>% inner_join(product, by="product.id") %>%
inner_join(customer, by="customer.id") %>%
select(profit, quantity.purchased, product.category,
product.name, customer.country) %>%
group_by(customer.country, product.category) %>% summarise(sum=sum(quantity.purchased))
View(table1)
table1 = transaction %>% inner_join(product, by="product.id") %>%
inner_join(customer, by="customer.id") %>%
select(profit, quantity.purchased, product.category,
product.name, customer.country) %>%
group_by(customer.country, product.category) %>% summarise(q=sum(quantity.purchased), p=sum(profit))
View(table1)
d1 = table1[table1$customer.country == country, ]
qty.category = function(country){
table1 = transaction %>% inner_join(product, by="product.id") %>%
inner_join(customer, by="customer.id") %>%
select(profit, quantity.purchased, product.category,
product.name, customer.country) %>%
group_by(customer.country, product.category) %>% summarise(q=sum(quantity.purchased), p=sum(profit))
d1 = table1[table1$customer.country == country, ]
plot_ly(d1, labels=d1$product.category, values=d1$q, type="pie")
}
qty.category("Australia")
runApp('Documents/Dashboard_data_sci/Pages/home.R')
runApp('Documents/Dashboard_data_sci/Pages/home.R')
qty.category = function(country){
table1 = transaction %>% inner_join(product, by="product.id") %>%
inner_join(customer, by="customer.id") %>%
select(profit, quantity.purchased, product.category,
product.name, customer.country) %>%
group_by(customer.country, product.category) %>%
summarise(q=sum(quantity.purchased), p=sum(profit))
d1 = table1[table1$customer.country == country, ]
plot_ly(d1, labels=d1$product.category, values=d1$q, type="pie") %>%
layout(title=list(text=paste("Showing chart for ", country), y = 0.85 ))
}
qty.category("Australia")
qty.category = function(country){
table1 = transaction %>% inner_join(product, by="product.id") %>%
inner_join(customer, by="customer.id") %>%
select(profit, quantity.purchased, product.category,
product.name, customer.country) %>%
group_by(customer.country, product.category) %>%
summarise(q=sum(quantity.purchased), p=sum(profit))
d1 = table1[table1$customer.country == country, ]
plot_ly(d1, labels=d1$product.category, values=d1$q, type="pie") %>%
layout(title=list(text=paste("Showing chart for ", country), y = 0.95 ))
}
qty.category("Australia")
runApp('Documents/Dashboard_data_sci/Pages/home.R')
runApp('Documents/Dashboard_data_sci/Pages/home.R')
runApp('Documents/Dashboard_data_sci/Pages/home.R')
hist(rt(100, 99))
x = seq(6, -6, length=100)
x
hist(dt(x, 30))
par(mfrow=c(3, 1))
hist(rchisq(100, 2))
hist(rchisq(100, 5))
hist(rchisq(100, 10))
x = seq(-6, 6, length=100)
df = c(1, 4, 10, 30)
for(i in df){
plot(dt(x, i), type="l")
}
color=c("green", "red", "blue", "black")
i = 1
while(i <= 4){
lines(dt(x, df[i]), col=color[i])
i = i+1
}
qf(0.95, 10, 20)
q = c(0.25, 0.5, 0.75 , 0.999)
qf(q, 10, 20)
random = rf(1000, 10, 20)
hist(random)
library(pracma)
f = function(x, y){
2*(2*x + 3*y)/5
}
integral2(f, 0, 1, 0, 1)
data = vector()
for(i in 0:3){
for(j in 0:2){
data = c(data, fq2(i, j))
}
}
fq2  = function(x, y){
(x+y)/30
}
data = vector()
for(i in 0:3){
for(j in 0:2){
data = c(data, fq2(i, j))
}
}
m = matrix(data, 4, 3, byrow = T)
m
ex = sum(0:3*gx)
gx = apply(m, 1, sum) # g(x)
gx
# iv
hy = apply(m, 2, sum) # h(y)
hy
ex = sum(0:3*gx)
ey = sum(0:2*hy)
ey
vx = sum(c(0, 1, 4, 9)*gx) - ex**2
vx
vy = sum(c(0, 1, 4)*hy) - ey**2
vy
f1 = function(x, y){
x*y*fq2(x, y)
}
e.x.y = sum(f1(0:3, 0:2))
f1 = function(x, y){
x*y*fq2(x, y)
}
e.x.y = vector()
for(i in 0:3){
for(j in 0:2){
e.x.y = c(e.x.y, f1(i, j))
}
}
e.x.y
e.x.y = sum(e.x.y)
e.x.y
cov.x.y = e.x.y - ex*ey
corr.x.y = cov.x.y/sqrt(vx*vy)
1 - choose(365, 365 - 23)
1 - choose(365, 365 - 23) * factorial(23) / 365 ^ 23
1 - choose(365, 365 - 50) * factorial(50) / 365 ^ 50
pbinom(3, 10, 0.2, lower.tail = FALSE)
pbinom(3, 10, 0.2, lower.tail = T)
1 - choose(80, 10)/choose(100, 10)
pbinom(0, 10, 0.2, lower.tail = T)
pbinom(0, 10, 0.2, lower.tail = F)
pbinom(0, 10, 0.2, lower.tail = FALSE)
choose(20, 10)/choose(100, 20)
choose(20, 10)/choose(100, 10)
pbinom(10, 10, 0.2, lower.tail = FALSE)
pbinom(10, 10, 0.2)
plot(density(rexp(1000, 0.5)), main="Title", xlab="X axis", ylab="Y axis")
dpois(3, 1/2)
plot(pexp(5))
plot(pexp(0:5))
?pexp
dhyper(3, 250, 5, 17)
# Ques 4
dhyper(3, 17, 250, 5)
dhyper(3, 250, 17, 5)
?rf
data(mtcars)
head(file)
library(dataset)
file<-data(mtcars)
head(file)
head(file)
head(mtcars)
str(mtcars)
range(mtcars$mpg)
quantile(mtcars$mpg,0.25)
quantile(mtcars$mpg,0.75)
IQR(mtcars$mpg)
a<-sd(mtcars$mpg)
a
var<-a^2
var
#2
p<-1/2000
n<-300
x<-2
pbinom(x,n,p,lower.tail = FALSE)
dt(a,49)
a<-seq(-10,10,length=50)
b<-seq(-10,10,length=50)
dt(a,49)
dt(b,49)
hist(dt(a,49))
hist(dt(b,49))
hist(dt(a,49))
f1<-function(x,y)
{
(x+3*y)/36
}
y<-c(0,1,2)
mat<-matrix(f1(0,y),f1(1,y),f1(2,y),nrow=3,ncol=3,byrow = TRUE)
y<-c(0,1,2)
mat<-matrix(c(f1(0,y),f1(1,y),f1(2,y)),nrow=3,ncol=3,byrow = TRUE)
f1<-function(x,y)
{
(x+3*y)/36
}
f2<-function(x,y)
{
(x*y*(x+3*y))/36
}
x<-c(0,1,2)
y<-c(0,1,2)
mat<-matrix(c(f1(0,y),f1(1,y),f1(2,y)),nrow=3,ncol=3,byrow = TRUE)
gx<-apply(mat,1,sum)
hy<-apply(mat,2,sum)
mx<-x*gx
my<-y*hy
mat2<-matrix(c(f2(0,y),f2(1,y),f2(2,y)),nrow=3,ncol=3,byrow = TRUE)
mxy<-sum(mat2)
cov<-(mx*my)-mxy
vax<-(x^2)*gx
vay<-(y^2)*hy
cor<-cov/sqrt(vax*vay)
cor
cov<-(mx*my)-mxy
cov
gx
hy
mx
hy
mat2
cov<-sum(mx*my)-mxy
cov
var
vay
vay<-(y^2)*hy
vay
vax<-(x^2)*gx
var
vax<-(x^2)*gx-mx^2
var
vay<-(y^2)*hy-my^2
vay
x<-c(0,1,2)
y<-c(0,1,2)
mat<-matrix(c(f1(0,y),f1(1,y),f1(2,y)),nrow=3,ncol=3,byrow = TRUE)
gx<-apply(mat,1,sum)
gx
hy<-apply(mat,2,sum)
hy
mx<-x*gx
mx
my<-y*hy
hy
mat2<-matrix(c(f2(0,y),f2(1,y),f2(2,y)),nrow=3,ncol=3,byrow = TRUE)
mat2
mxy<-sum(mat2)
cov<-sum(mx*my)-mxy
cov
vax<-(x^2)*gx-mx^2
var
vay<-(y^2)*hy-my^2
vay
cor<-cov/sqrt(vax*vay)
cor
#2
p<-1/2000
n<-300
x<-2
pbinom(x,n,p,lower.tail = FALSE)
#4
a<-seq(-10,10,length=50)
b<-seq(-10,10,length=50)
dt(a,49)
dt(b,49)
hist(dt(a,49))
hist(dt(b,49))
vay<-sum((y^2)*hy-my^2)
vay
cor<-cov/sqrt(vax*vay)
cor
vax<-sum((x^2)*gx-mx^2)
var
vay<-sum((y^2)*hy-my^2)
vay
cor<-cov/sqrt(vax*vay)
cor
my
mx
#4
a<-seq(-10,10,length=50)
b<-seq(-10,10,length=50)
dt(a,49)
dt(b,49)
par(mfcol(1,2))
par(mfcol=c(1,2))
hist(dt(a,49))
hist(dt(b,49))
library(shiny); runApp('Documents/Dashboard_data_sci/Pages/home.R')
colnames(transaction)
colnames(product)
colnames(order)
t = transaction %>% inner_join(product) %>% inner_join(customer)
View(t)
t %>% select(customer.country, product.name, quantity.purchased) %>% group_by(product.name) %>% filter(quantity.purchased >= median(quantity.purchased))
q = t %>% select(customer.country, product.name, quantity.purchased) %>% group_by(product.name) %>% filter(quantity.purchased >= median(quantity.purchased))
View(q)
hist(x=q$product.name, q$quantity.purchased)
hist(x=1:3230, q$quantity.purchased)
plot_ly(q, x=q$customer.country, y=q$quantity.purchased, type="scatter", mode="markers", color=q$customer.country)
d = q[q$product.name == "Apple Laptop"]
d = q[q$product.name == "Apple Laptop", ]
d
plot_ly(d, x=q$customer.country, y=q$quantity.purchased, type="scatter", mode="markers", color=q$customer.country)
plot_ly(d, x=d$customer.country, y=d$quantity.purchased, type="scatter", mode="markers", color=q$customer.country)
plot_ly(d, x=d$customer.country, y=d$quantity.purchased, type="scatter", mode="markers", color=d$customer.country)
plot_ly(d, x=d$customer.country, y=d$quantity.purchased, type="scatter", mode="markers", color=d$customer.country, size=q$quantity.purchased)
plot_ly(d, x=d$customer.country, y=d$quantity.purchased, type="scatter", mode="markers", color=d$customer.country, size=d$quantity.purchased)
plot_ly(d, x=d$customer.country, y=d$quantity.purchased, type="scatter", mode="markers", color=d$customer.country, size=d$quantity.purchased*100)
q = t %>% select(customer.country, product.name, quantity.purchased) %>% group_by(product.name, customer.country) %>% summarise(sum=sum(quantity.purchased)) %>% filter(quantity.purchased >= median(quantity.purchased))
q = t %>% select(customer.country, product.name, quantity.purchased) %>% group_by(product.name, customer.country) %>% summarise(sum=sum(quantity.purchased))
View(q[q$product.name == "Apple Laptop", ])
d = q[q$product.name == "Apple Laptop", ]
plot_ly(d, x=d$customer.country, y=d$quantity.purchased, type="scatter", mode="markers", color=d$customer.country, size=d$quantity.purchased*100)
d
plot_ly(d, x=~customer.country, y=~sum, type="scatter", mode="markers", colors = "Paired", size=~sum*1000)
plot_ly(d, x=~customer.country, y=~sum, type="scatter", mode="markers", colors =~customer.country, size=~sum*1000000)
plot_ly(d, x=~customer.country, y=~sum)
d = q[q$product.name == "Bed Sheets", ]
plot_ly(d, x=~customer.country, y=~sum)
plot_ly(d, x=~customer.country, y=~sum, type="bar", color=I("black"))
?I
plot_ly(d, x=~customer.country, y=~sum, type="bar", color=I("red"))
plot_ly(d, x=~customer.country, y=~sum, type="bar", color=I("maroon"))
runApp('Documents/Dashboard_data_sci/Pages/home.R')
prod.chart = function(prod.name){
t = transaction %>% inner_join(product) %>% inner_join(customer)
q = t %>% select(customer.country, product.name, quantity.purchased) %>%
group_by(product.name, customer.country) %>% summarise(sum=sum(quantity.purchased))
t1 = q[t$product.name == prod.name, ]
plot_ly(t1, x=~customer.country, y=~sum, type="bar", color=I("maroon"))
}
prod.chart()
prod.chart("Apple Laptop")
prod.chart = function(prod.name){
t = transaction %>% inner_join(product) %>% inner_join(customer)
q = t %>% select(customer.country, product.name, quantity.purchased) %>%
group_by(product.name, customer.country) %>% summarise(sum=sum(quantity.purchased))
t1 = q[q$product.name == prod.name, ]
plot_ly(t1, x=~customer.country, y=~sum, type="bar", color=I("maroon"))
}
prod.chart("Apple Laptop")
prod.chart = function(prod.name){
t = transaction %>% inner_join(product) %>% inner_join(customer)
q = t %>% select(customer.country, product.name, quantity.purchased) %>%
group_by(product.name, customer.country) %>% summarise(sum=sum(quantity.purchased))
t1 = q[q$product.name == prod.name, ]
plot_ly(t1, x=~customer.country, y=~sum, type="bar", color=I("maroon")) %>%
layout(title=paste("Top markets for ", prod.name))
}
prod.chart("Apple Laptop")
prod.chart = function(prod.name){
t = transaction %>% inner_join(product) %>% inner_join(customer)
q = t %>% select(customer.country, product.name, quantity.purchased) %>%
group_by(product.name, customer.country) %>% summarise(sum=sum(quantity.purchased))
t1 = q[q$product.name == prod.name, ]
plot_ly(t1, x=~customer.country, y=~sum, type="bar", color=I("maroon")) %>%
layout(title=list(text=paste("Top markets for ", prod.name), y=0.95))
}
prod.chart("Apple Laptop")
runApp('Documents/Dashboard_data_sci/Pages/home.R')
prod = unique(product$product.name)
prod
runApp('Documents/Dashboard_data_sci/Pages/home.R')
getwd()
setwd("Documents/Dashboard_data_sci/")
list.files()
setwd("Pages/")
list.files()
