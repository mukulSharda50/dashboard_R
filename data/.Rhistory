boxplot(Ozone~Month, data = airquality)
boxplot(Ozone~Month, data = airquality, xlab = "Month", ylab = "Ozone (ppb", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone
| (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main = "Ozone and Wind in New York City")
plot(airquality$Wind, airquality$Ozone)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
par()
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main = "Wind and Ozone in NYC")
airquality
head(airquality)
may <- subset(airquality, Moth==5)
may <- subset(airquality, Month==5)
points(may$Wind, may$Ozone, col = "blue", pch=2)
points(may$Wind, may$Ozone, col = "blue", pch=17)
notmay = subset(airquality, Month != 5)
notmay = subset(airquality, Month!=5)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col = "red", pch=10)
points(notmay$Wind, notmay$Ozone, col = "red", pch=8)
legend("topright", c(17, 8), c("blue", "red"), c("May", "Other Months"))
legend("topright", c(17, 8), c("May", "Other Months"), c("blue", "red"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v = median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R,airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=TRUE)
ls
ls
ls()
swirl()
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col="blue")
abline(h = 0.4, col="red")
5
5
j
2
12
abline(h = 0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmp(mt)
heatmap(mt)
mt
plot(mt)
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red", "orange", "purple"), pch=+3, cex=2, lwd=2)
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, cols=cols1[newClust2])
points(x,y,pch=19,cex=2,cols=cols1[newClust2])
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
library(shiny); runApp('Documents/Data_Sci_Dashboard/Pages/home.R')
library(shiny); runApp('Documents/Dashboard_data_sci/Pages/home.R')
install.packages("DT")
library(DT)
runApp('Documents/Dashboard_data_sci/Pages/home.R')
trans.data.table = function(){
datatable(transaction)
}
trans.data.table()
runApp('Documents/Dashboard_data_sci/Pages/home.R')
runApp('Documents/Dashboard_data_sci/Pages/home.R')
trans.data.table = function(){
datatable(head(transaction), 1000)
}
trans.data.table()
head(transaction, 1000)
datatable(head(transaction, 1000))
runApp('Documents/Dashboard_data_sci/Pages/home.R')
runApp('Documents/Dashboard_data_sci/Pages/home.R')
setwd("Documents/tiet/sem 5/data sci/archive/")
df = read.csv("ecommerce.csv")
colnames(df)
aging = df$Aging
transaction = data.frame(
order.id, product.id, customer.id, ship.id, qty.purchased, profit, aging,
purchase.segment
)
customer.id = df$Customer.ID
product.id = paste(sample(c, n, replace=T),"-", seq(1: n), sep="")
getwd()
list.files()
head(df)
View(cbind(transaction, df$Aging))
unique(df$Aging)
setwd("/home/leaveit/Documents/Dashboard_data_sci/data")
write.csv(transaction, "transaction_details.csv")
rm(df)
rm(transaction)
transaction = read.csv("transaction_details.csv")
View(transaction)
transaction = cbind(transaction, df$Aging)
colnames(transaction)
setwd("Documents/tiet/sem 5/data sci/archive/")
list.files()
setwd("Documents/tiet/sem 5/data sci/archive/")
getwd()
setwd('..')
getwd()
setwd('/home/leaveit')
setwd("Documents/tiet/sem 5/data sci/archive/")
df = read.csv("ecommerce.csv")
unique(df$Aging)
transaction$Aging = df$Aging
View(transaction)
setwd("/home/leaveit/Documents/Dashboard_data_sci/data")
write.csv(transaction, "transaction_details.csv")
rm(transaction)
transaction = read.csv("transaction_details.csv")
View(transaction)
rm(transaction)
View(transaction)
transaction = read.csv("transaction_details.csv")
transaction = read.csv("transaction_details.csv")
View(transaction)
#unique(df$Aging)
#transaction$Aging = df$Aging
transaction
median(transaction$Aging, na.rm=T)
transaction[is.na(transaction),]$Aging
#unique(df$Aging)
#transaction$Aging = df$Aging
transaction[is.na(transaction),]$Aging = median(transaction$Aging, na.rm=T)
transaction[is.na(transaction)]
transaction[is.na(transaction)]$Aging
transaction[is.na(transaction),]
transaction[is.na(transaction),]$Aging
#unique(df$Aging)
#transaction$Aging = df$Aging
transaction[is.na(transaction),]$Aging = median(transaction$Aging, na.rm=T)
View(transaction)
transaction[!is.na(transaction$Aging), ]$Aging
aging = transaction[!is.na(transaction$Aging), ]$Aging
length(aging)
hist(aging)
barplot(aging)
plot(aging, type="l")
sample(c("Mobile", "Desktop", "Tablet"), 51290)
sample(c("Mobile", "Desktop", "Tablet"), 51290, replace = T)
table(sample(c("Mobile", "Desktop", "Tablet"), 51290, replace = T))
table(sample(c("Mobile", "Desktop", "Tablet"), 51290, replace = T))
# print transaction data
trans.data.table = function(){
datatable(head(transaction, 1000))
}
table(sample(c("Mobile", "Desktop", "Tablet"), 51290, replace = T))
# print transaction data
trans.data.table = function(){
datatable(head(transaction, 1000))
}
?sample
table(sample(c("Mobile", "Desktop", "Tablet"), 51290, replace = T), prob=c(0.4, 0.4, 0.2))
table(sample(c("Mobile", "Desktop", "Tablet"), 51290, replace = T), prob=0.4)
colnames(transaction)
transaction = read.csv("transaction_details.csv")
colnames(transaction)
sample(1:39, 51290, replace = t)
sample(1:39, 51290, replace = T)
table(sample(1:39, 51290, replace = T))
hist(sample(1:39, 51290, replace = T))
round(runif(51290, 1, 91))
table(round(runif(51290, 1, 91)))
hist(round(runif(51290, 1, 91)))
hist(round(rnorm(51290, 1, 91)))
hist(round(rpois(51290, 1, 91)))
hist(round(rpois(51290, 1)))
transaction$quantity.purchased = round(runif(1:39, 51290, replace = T))
transaction$quantity.purchased = round(runif(51290, 1, 34))
#unique(df$Aging)
#transaction$Aging = df$Aging
write.csv(transaction, "transaction_details.csv")
rm(transaction)
transaction = read.csv("transaction_details.csv")
View(transaction)
transaction = read.csv("transaction_details.csv")
product = read.csv("product_details.csv")
order = read.csv("order_details.csv")
customer = read.csv("customer_details.csv")
ship = read.csv("shipping_details.csv")
discount = product$product.discount
qty = transaction$quantity.purchased
prof = transaction$profit
cor(discount, qty)
cor(discount, prof)
hist(transaction$quantity.purchased)
library(ggplot2)
library(dplyr)
library(DT)
path_data = "/home/leaveit/Documents/Dashboard_data_sci/data"
if (getwd() != path_data){
setwd("/home/leaveit/Documents/Dashboard_data_sci/data")
}
transaction = read.csv("transaction_details.csv")
product = read.csv("product_details.csv")
order = read.csv("order_details.csv")
customer = read.csv("customer_details.csv")
ship = read.csv("shipping_details.csv")
#unique(df$Aging)
#transaction$Aging = df$Aging
#write.csv(transaction, "transaction_details.csv")
#table(sample(c("Mobile", "Desktop", "Tablet"), 51290, replace = T))
#transaction$quantity.purchased = round(runif(51290, 1, 34))
# print transaction data
trans.data.table = function(){
datatable(head(transaction, 1000))
}
# summary
trans.summ = summary(transaction)
# aging dist
aging = transaction[!is.na(transaction$Aging), ]$Aging
hist(aging)
hist(transaction$quantity.purchased)
total.trans = length(unique(transaction$order.id))
# profit distribution
profit.plots = function(){
q1 = transaction %>%
inner_join(order) %>%
select(profit, order.month) %>%
group_by(order.month) %>%
summarise(sum=sum(profit))
par(mfrow=c(1, 2), mar = c(5, 4, 4, 2) + 0.1)
hist(transaction$profit)
plot(q1$sum, main="Profit per month",type="l",
xlab = "Months", ylab = "Profit")
}
# total profit and total sale
total.profit = sum(transaction$profit)
prod.trans = transaction %>%
inner_join(product, by="product.id") %>%
select(qty.purchased, product.price)
total.sales = sum(prod.trans$qty.purchased * prod.trans$product.price, na.rm = T)
cat("total sales: ", total.sales)
cat("total profit: ", total.profit)
# purchase segment
unique(transaction$purchase.segment)
# max qty and min qty purchased
max.qty.purchased = max(transaction$qty.purchased)
min.qty.purchased = min(transaction$qty.purchased)
# which product category has highest profit
prod.profit = transaction %>%
inner_join(product) %>%
select(product.category, product.name, profit) %>%
group_by(product.category)
maxprofit.category = unique(prod.profit[prod.profit$profit == max(prod.profit$profit), ])
# profit per month
profit.month = function(){
}
# affect on profit when ship.cost is increased
profit.ship.cost = transaction %>%
inner_join(ship) %>%
select(profit, qty.purchased, ship.cost) %>%
arrange(desc(ship.cost))
# plot(profit.ship.cost$profit~profit.ship.cost$qty.purchased) #is this correct?
plot(profit.ship.cost$profit, profit.ship.cost$ship.cost,
xlab="Profit", ylab="Shipping Cost", main="Relationship between profit and shipping cost")
# affect of discount on qty purchased or profit
discount = product$product.discount
qty = transaction$quantity.purchased
prof = transaction$profit
cor(discount, qty)
cor(discount, prof)
# which product is bought max in which country
data = transaction %>%
inner_join(customer) %>%
inner_join(product) %>%
select(product.name, product.category, qty.purchased, customer.country) %>%
group_by(customer.country) %>%
summarise(max=max(qty.purchased))
library(shiny); runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
unique.categ = length(unique(product.category))
library(ggplot2)
library(dplyr)
path_data = "/home/leaveit/Documents/Dashboard_data_sci/data"
if (getwd() != path_data){
setwd("/home/leaveit/Documents/Dashboard_data_sci/data")
}
product = read.csv("product_details.csv")
attach(product)
product.data.table = function(){
datatable(head(product, 1000))
}
unique.categ = length(unique(product.category))
unique.prod = length(unique(product.name))
prod.category.List = unique(product.category)
prod.List = unique(product.name)
data = product %>% select(product.name, product.price, product.discount) %>%
group_by(product.name)
d = unique(data)
# least expensive, most expensive
# highest discount
# products offered in different categories
table(product.category)
total.product.count = product %>% count(product.name)
barplot(total.product.count$n,
horiz = TRUE,
names.arg = total.product.count$product.name)
runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
column(transaction)
colnames(transaction)
boxplot(transaction$Aging)
boxplot(transaction$Aging, transaction$quantity.purchased, transaction$profit)
boxplot(transaction$Aging, transaction$quantity.purchased)
boxplot(transaction$quantity.purchased)
boxplot(transaction$profit)
boxplot(transaction$Aging)
boxplot(scale(transaction$Aging), scale(transaction$quantity.purchased), scale(transaction$profit))
age = scale(transaction$Aging)
head(age)
mean(age)
mean(age, na.rm=T)
qty = scale(transaction$quantity.purchased)
mean(qty)
sd(qty)
sd(age)
sd(age, na.rm=T)
profsc = scale(transaction$profit)
boxplot(age, qty, )
boxplot(age)
boxplot(age, qty)
boxplot(data.frame(age, qty, profsc))
boxplot(data.frame(age, qty, profsc), main="Outlier Analysis")
library(ggplot2)
library(dplyr)
library(DT)
path_data = "/home/leaveit/Documents/Dashboard_data_sci/data"
if (getwd() != path_data){
setwd("/home/leaveit/Documents/Dashboard_data_sci/data")
}
transaction = read.csv("transaction_details.csv")
product = read.csv("product_details.csv")
order = read.csv("order_details.csv")
customer = read.csv("customer_details.csv")
ship = read.csv("shipping_details.csv")
#unique(df$Aging)
#transaction$Aging = df$Aging
#write.csv(transaction, "transaction_details.csv")
#table(sample(c("Mobile", "Desktop", "Tablet"), 51290, replace = T))
#transaction$quantity.purchased = round(runif(51290, 1, 34))
# print transaction data
trans.data.table = function(){
datatable(head(transaction, 1000))
}
# summary
trans.summ = summary(transaction)
# aging dist
aging = transaction[!is.na(transaction$Aging), ]$Aging
hist(aging)
hist(transaction$quantity.purchased)
total.trans = length(unique(transaction$order.id))
# profit distribution
profit.plots = function(){
q1 = transaction %>%
inner_join(order) %>%
select(profit, order.month) %>%
group_by(order.month) %>%
summarise(sum=sum(profit))
par(mfrow=c(2, 2), mar = c(5, 4, 4, 2) + 0.1)
hist(transaction$profit)
plot(q1$sum, main="Profit per month",type="l",
xlab = "Months", ylab = "Profit")
age = scale(transaction$Aging)
qty = scale(transaction$quantity.purchased)
profsc = scale(transaction$profit)
boxplot(data.frame(age, qty, profsc), main="Outlier Analysis")
}
# total profit and total sale
total.profit = sum(transaction$profit)
prod.trans = transaction %>%
inner_join(product, by="product.id") %>%
select(qty.purchased, product.price)
total.sales = sum(prod.trans$qty.purchased * prod.trans$product.price, na.rm = T)
cat("total sales: ", total.sales)
cat("total profit: ", total.profit)
# purchase segment
unique(transaction$purchase.segment)
# max qty and min qty purchased
max.qty.purchased = max(transaction$qty.purchased)
min.qty.purchased = min(transaction$qty.purchased)
# which product category has highest profit
prod.profit = transaction %>%
inner_join(product) %>%
select(product.category, product.name, profit) %>%
group_by(product.category)
maxprofit.category = unique(prod.profit[prod.profit$profit == max(prod.profit$profit), ])
# profit per month
profit.month = function(){
}
# affect on profit when ship.cost is increased
profit.ship.cost = transaction %>%
inner_join(ship) %>%
select(profit, qty.purchased, ship.cost) %>%
arrange(desc(ship.cost))
# plot(profit.ship.cost$profit~profit.ship.cost$qty.purchased) #is this correct?
plot(profit.ship.cost$profit, profit.ship.cost$ship.cost,
xlab="Profit", ylab="Shipping Cost", main="Relationship between profit and shipping cost")
# affect of discount on qty purchased or profit
discount = product$product.discount
qty = transaction$quantity.purchased
prof = transaction$profit
cor(discount, qty)
cor(discount, prof)
# which product is bought max in which country
data = transaction %>%
inner_join(customer) %>%
inner_join(product) %>%
select(product.name, product.category, qty.purchased, customer.country) %>%
group_by(customer.country) %>%
summarise(max=max(qty.purchased))
runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
?boxplot
?par
bp = data.frame(age, qty, profsc)
ggplot(bp, aes(x=bp)) +
geom_boxplot(fill="slateblue", alpha=0.2)
ggplot(bp, aes(x=bp$age)) +
geom_boxplot(fill="slateblue", alpha=0.2)
ggplot(bp) +
geom_boxplot(fill="slateblue", alpha=0.2)
aes(x = bp)
ggplot(bp, aes(x = bp))
ggplot(bp$qty, aes(x = bp$age)) +
geom_boxplot(fill="slateblue", alpha=0.2)
boxplot(bp, main="Outlier Analysis")
age = scale(transaction$Aging)
qty = scale(transaction$quantity.purchased)
profsc = scale(transaction$profit)
bp = data.frame(age, qty, profsc)
boxplot(bp, main="Outlier Analysis")
age = scale(transaction$Aging)
qty = scale(transaction$quantity.purchased)
profsc = scale(transaction$profit)
bp = data.frame(age, qty, profsc)
boxplot(bp, main="Outlier Analysis")
age = scale(transaction$Aging)
qty = scale(transaction$quantity.purchased)
profsc = scale(transaction$profit)
bp = data.frame(age, qty, profsc)
boxplot(bp, main="Outlier Analysis")
runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
par(mfrow=c(3, 2), mar = c(5, 4, 4, 2) + 0.1)
hist(transaction$profit)
plot(q1$sum, main="Profit per month",type="l",
xlab = "Months", ylab = "Profit")
q1 = transaction %>%
inner_join(order) %>%
select(profit, order.month) %>%
group_by(order.month) %>%
summarise(sum=sum(profit))
plot(q1$sum, main="Profit per month",type="l",
xlab = "Months", ylab = "Profit")
boxplot(bp, main="Outlier Analysis")
runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
par(mfrow=c(2, 2), mar = c(5, 4, 4, 2) + 0.1)
hist(transaction$profit)
plot(q1$sum, main="Profit per month",type="l",
xlab = "Months", ylab = "Profit")
boxplot(bp, main="Outlier Analysis")
runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
trans.data.table()
product.data.table()
order.data.table()
ship.data.table()
customer.data.table()
runApp('~/Documents/Dashboard_data_sci/Pages/home.R')
