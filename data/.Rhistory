select(iris, Sepal.Length, Petal.Length)
select(iris, Sepal.Length: Petal.Length)
table(iris)
table(iris, Sepal.Length, Petal.Length)
table(iris, iris$Sepal.Length, iris$Petal.Length)
table(1:4, 4:8)
table(1:4, 4:7)
m = matrix(1:9, 3,3 )
lapply(m, sum)
mapply(rep, times = 1:4, MoreArgs = list(x = 42))
mapply(rep, times = 1:4, MoreArgs = list(x = 42, y=21))
mapply(rep, times = 1:4, MoreArgs = list(x = 42,21,1,2))
?gregexpr
install.packages("pracma")
library("pracma")
integral2(f, 0, x, x, 1)
integral2(f, 0, 1, 0, 1)
f = function(x, y){
2*(2*x + 3*y)/5
}
integral2(f, 0, 1, 0, 1)
gx = f(1, y)
gx = f(1)
f(1)
integral(gx, 0, 1)
gx = function(y){
2*(2 + 3*y)/5
}
integral(gx, 0, 1)
hy = function(x){
2*(2*x)/5
}
integral(hy, 0, 1)
ev = function(x, y){
x*y*f(x, y)
}
integral2(ev, 0, 1, 0, 1)
fq2(0:3, 0:2)
fq2  = function(x, y){
(x+y)/30
}
fq2(0:3, 0:2)
fq2  = function(x, y){
(x+y)/30
}
data = fq2(0:3, 0:2)
matrix(data, 4, 3)
1/30
fq2  = function(x, y){
(x+y)/30
}
data = vector()
for(i in 0:3){
for(j in 0:2){
data = fq2(i, j)
}
}
matrix(data, 4, 3)
1/30
fq2  = function(x, y){
(x+y)/30
}
data = vector()
for(i in 0:3){
for(j in 0:2){
cat(i, j)
data = fq2(i, j)
}
}
for(i in 0:3){
for(j in 0:2){
print(i)
print(j)
data = fq2(i, j)
}
}
for(i in 0:3){
for(j in 0:2){
cat(i, j, sep=" ")
data = fq2(i, j)
}
}
for(i in 0:3){
for(j in 0:2){
cat(i, j, sep=" ", collapse="\n")
data = fq2(i, j)
}
}
fq2  = function(x, y){
x = (x+y)/30
print(x)
return x
fq2  = function(x, y){
(x+y)/30
}
data = vector()
for(i in 0:3){
for(j in 0:2){
cat(i, j, sep=" ", collapse="\n")
data = fq2(i, j)
}
}
matrix(data, 4, 3)
matrix(fq2(0:3, 0:2), 4, 3)
matrix(fq2(0:3, 0:2), 4, 3, byrow = T)
1/15
fq2  = function(x, y){
(x+y)/30
}
data = vector()
for(i in 0:3){
for(j in 0:2){
cat(i, j, sep=" ", collapse="\n")
data = fq2(i, j)
}
}
matrix(data, 4, 3, byrow = T)
matrix(fq2(0:3, 0:2), 4, 3, byrow = T)
1/6
4/30
fq2  = function(x, y){
(x+y)/30
}
data = vector()
for(i in 0:3){
for(j in 0:2){
# cat(i, j, sep=" ", collapse="\n")
data = c(data, fq2(i, j))
}
}
matrix(data, 4, 3, byrow = T)
# ii
sum(matrix(data, 4, 3, byrow = T))
if (sum(matrix(data, 4, 3, byrow = T)) == 1){
print("YES")
}
m = matrix(data, 4, 3, byrow = T)
# iii
apply(m, 1, sum) # g(x)
sum(0.03333333, 0.06666667)
gx = apply(m, 1, sum) # g(x)
gx
# iv
hy = apply(m, 2, sum) # h(y)
hy
print(sum(0:3*gx))
# vi
print(0:3*gx)
print(sum(0:3*0:2*m))
print(sum(0:2*hy))
# v
m[1, 2]/hy[2]
hy
print(sum(0:3*gx))
print(sum(0:2*hy))
print(sum(0:3*0:2*m))
# vi
print(sum(0:3*m))
ex = sum(0:3*gx)
ex
ex = sum(0:3*gx)
ex
ey = sum(0:2*hy)
ey
vx = sum(c(0, 1, 4, 9)*gx) - ex**2
vx
vy = sum(c(0, 1, 4)*hy) - ey**2
vy
?par
library(datasets)
data()
data("AirPassengers")
View(AirPassengers)
str(AirPassengers)
hist(AirPassengers)
data("airquality")
str(airquality)
hist(airquality$Ozone)
?hist
hist(airquality$Ozone, breaks=10)
hist(airquality$Ozone, breaks=20)
hist(airquality$Ozone, breaks=30)
plot(airquality$Ozone, airquality$Wind)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~tempdir(), airquality)
library("swirl")
swirl()
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl())
swirl()
head()
head(x)
head(pollution)
dim(pollution)
summary(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = )
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, h = 2)
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main="Number of Counties in Each Region")
boxplot(pm25~region , data = pollution)
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution,"east")
subset(pollution,region == "east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west"), col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
plot(pollution, pm25)
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
list.files()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Wind)
hist(airquality$Ozone)
boxplot(airquality$Month)
table(airquality$Month)
boxplot(Ozone~Month, data = airquality)
boxplot(Ozone~Month, data = airquality, xlab = "Month", ylab = "Ozone (ppb", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone
| (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main = "Ozone and Wind in New York City")
plot(airquality$Wind, airquality$Ozone)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
par()
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main = "Wind and Ozone in NYC")
airquality
head(airquality)
may <- subset(airquality, Moth==5)
may <- subset(airquality, Month==5)
points(may$Wind, may$Ozone, col = "blue", pch=2)
points(may$Wind, may$Ozone, col = "blue", pch=17)
notmay = subset(airquality, Month != 5)
notmay = subset(airquality, Month!=5)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col = "red", pch=10)
points(notmay$Wind, notmay$Ozone, col = "red", pch=8)
legend("topright", c(17, 8), c("blue", "red"), c("May", "Other Months"))
legend("topright", c(17, 8), c("May", "Other Months"), c("blue", "red"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v = median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R,airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=TRUE)
ls
ls
ls()
swirl()
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col="blue")
abline(h = 0.4, col="red")
5
5
j
2
12
abline(h = 0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmp(mt)
heatmap(mt)
mt
plot(mt)
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red", "orange", "purple"), pch=+3, cex=2, lwd=2)
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, cols=cols1[newClust2])
points(x,y,pch=19,cex=2,cols=cols1[newClust2])
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
library(shiny); runApp('Documents/Data_Sci_Dashboard/Pages/home.R')
colnames(order)
path_data = "/home/leaveit/Documents/Data_Sci_Dashboard/data"
if (getwd() != path_data){
setwd("/home/leaveit/Documents/Data_Sci_Dashboard/data")
}
order = read.csv("order_details.csv")
attach(order)
colnames(order)
path_data = "/home/leaveit/Documents/Data_Sci_Dashboard/data"
if (getwd() != path_data){
setwd("/home/leaveit/Documents/Data_Sci_Dashboard/data")
}
transaction = read.csv("transaction_details.csv")
attach(transaction)
colnames(transaction)
# pre-processing
any(is.null(transaction))
unique(qty.purchased)
transaction[qty.purchased == "",]
transaction[qty.purchased == "",]
qty = unique(transaction[qty.purchased != "" | qty.purchased != "abc" ,]$qty.purchased)
qty
qty = unique(transaction[qty.purchased != "" & qty.purchased != "abc" ,]$qty.purchased)
qty
qty = as.numeric(unique(transaction[qty.purchased != "" & qty.purchased != "abc" ,]$qty.purchased))
transaction[qty.purchased == "",]$qty.purchased = median(qty)
transaction[qty.purchased == "",]$qty.purchased = median(qty)
unique(qty.purchased)
qty = as.numeric(unique(transaction[qty.purchased != "" & qty.purchased != "abc" ,]$qty.purchased))
transaction[qty.purchased == "",]$qty.purchased = median(qty)
transaction[qty.purchased == "",]$qty.purchased = median(qty)
unique(qty.purchased)
unique(transaction$qty.purchased)
transaction[qty.purchased == "abc",]$qty.purchased = median(qty)
unique(transaction$qty.purchased)
colnames(transaction)
is.null(order.id)
is.null(product.id)
is.null(customer.id)
is.na(customer.id)
any(is.na(customer.id))
colnames(transaction)
unique(profit)
trans.profit = substring(profit, 2)
trans.profit = trimws(trans.profit, which="right")
unique(trans.profit)
trans.profit = as.numeric(trans.profit)
head(transaction)
# Total profit and total sale
total.profit = sum(trans.profit)
total.profit
library(ggplot2)
library(dplyr)
head(transaction)
products = read.csv("product_details.csv")
merge(x = transaction, y = products, by="product.id")
View(merge(x = transaction, y = products, by="product.id"))
j = transaction %>%
inner_join(products, by="product.id")
View(j)
j = transaction %>%
inner_join(products, by="product.id") %>%
select(qty.purchased, product.price)
View(j)
prod.price = substring(products$product.price, 2)
prod.price = trimws(prod.price, which="right")
prod.price = as.numeric(prod.price)
j = transaction %>%
inner_join(products, by="product.id") %>%
select(qty.purchased, product.price)
prod.price = substring(j$product.price, 2)
prod.price = trimws(prod.price, which="right")
prod.price = as.numeric(prod.price)
unique(prod.price)
total.sales = sum(prod.price, na.rm = T)
total.sales
# pruchase segment
unique(purchase.segment)
colnames(transaction)
# max qty and min qty purchased
unique(qty.purchased)
# max qty and min qty purchased
unique(transaction$qty.purchased)
max.qty.purchased = max(transaction$qty.purchased)
min.qty.purchased = min(transaction$qty.purchased)
max.qty.purchased
min.qty.purchased
colnames(transaction)
head(transaction)
transaction %>%
inner_join(products)
q = transaction %>%
inner_join(products)
View(q)
View(head(q))
colnames(q)
q = transaction %>%
inner_join(products) %>%
select(product.category, profit) %>%
group_by(product.category)
head(q)
q = transaction %>%
inner_join(products) %>%
select(product.category, product.name, profit) %>%
group_by(product.category)
head(q)
q[q$profit == max(profit), ]
View(q[q$profit == max(profit), ])
View(unique(q[q$profit == max(profit), ]))
orders = read.csv("order_details.csv")
colnames(q)
q1 = transaction %>%
inner_join(orders)
colnames(q1)
q1 = transaction %>%
inner_join(orders) %>%
select(profit, order.date) %>%
group_by(order.date)
head(q1)
plot(q1)
head(q1)
q1 = transaction %>%
inner_join(orders) %>%
select(profit, order.date) %>%
group_by(order.date)
dim(q1)
View(q1)
as.Date(q1$order.date)
format(q1$order.date, "%Y")
format("20-01-2000", "%Y")
format("2020-01-20", "%Y")
format("2020-01-20", "%Y")
?format
format(as.Date(q1$order.date, format="%d/%m/%Y"), "%Y")
unique(q1$order.date)
q1 = transaction %>%
inner_join(orders) %>%
select(profit, order.month) %>%
group_by(order.month)
head(q1)
dim(q1)
View(q1)
q1 = transaction %>%
inner_join(orders) %>%
select(profit, order.month) %>%
group_by(order.month) %>%
sum(profit)
?dplyr
?summarise
